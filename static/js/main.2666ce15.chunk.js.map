{"version":3,"sources":["images/logo.png","constants/dictionary_api.js","GlobalStyles.js","components/Header.js","components/RandomTiles.js","components/Form.js","components/GuessList.js","components/WinnerMessage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PROXY_URL","DICTIONARY_URL","word","GlobalStyle","createGlobalStyle","Wrapper","styled","div","StyledHeader","header","Header","src","logo","alt","GameBoard","Letter","RandomTiles","dice","randomLetter","diceRoll","map","die","Math","floor","random","length","letterArray","letter","i","setState","props","storeTile","state","this","key","Component","StyledForm","form","ButtonContainer","Label","label","Input","input","Form","htmlFor","type","id","value","onChange","e","onClick","handleSubmit","handleFinish","Guesses","ul","GuessList","correctGuesses","submitted","userGuesses","guess","className","incorrectGuesses","WinnerMessage","Board","FormContainer","App","storeTiles","handleChange","userInput","target","preventDefault","lowerCaseInput","toLowerCase","toString","push","forEach","getInfo","setTimeout","checkTiles","toUpperCase","split","includes","handleGuesses","checkedTiles","Array","isArray","searchResults","wordResult","process","axios","get","dataResponse","headers","then","res","result","data","err","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","href","origin","addEventListener","fetch","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2666ce15.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.24485b4e.png\";","export const PROXY_URL = 'https://cors-anywhere.herokuapp.com/';\nexport const DICTIONARY_URL = word => `https://od-api.oxforddictionaries.com/api/v2/entries/en-gb/${word}?strictMatch=false`;\n\nexport default { PROXY_URL, DICTIONARY_URL }","import styled from 'styled-components';\nimport { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n\thtml{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,footer,header,nav,section{display:block}h1{font-size:2em;margin:.67em 0}figcaption,figure,main{display:block}figure{margin:1em 40px}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace,monospace;font-size:1em}a{background-color:transparent;-webkit-text-decoration-skip:objects}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:inherit}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace,monospace;font-size:1em}dfn{font-style:italic}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}audio,video{display:inline-block}audio:not([controls]){display:none;height:0}img{border-style:none}svg:not(:root){overflow:hidden}button,input,optgroup,select,textarea{font-family:sans-serif;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}button,html [type=button],[type=reset],[type=submit]{-webkit-appearance:button}button::-moz-focus-inner,[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner{border-style:none;padding:0}button:-moz-focusring,[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:.35em .75em .625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{display:inline-block;vertical-align:baseline}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-cancel-button,[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details,menu{display:block}summary{display:list-item}canvas{display:inline-block}template{display:none}[hidden]{display:none}\n\n\t.clearfix:after {visibility: hidden; display: block; font-size: 0; content: ''; clear: both; height: 0; }\n\n\thtml { -moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box;}\n\n\t*, *:before, *:after {box-sizing: inherit}\n\n\t.sr-only { position: absolute; width: 1px; height: 1px; margin: -1px; border: 0; padding: 0; white-space: nowrap; clip-path: inset(100%); clip: rect(0 0 0 0); overflow: hidden;}\n\n\thtml {\n\t\tfont-size: 125%;\n\t\tfont-family: 'Lexend Exa', sans-serif;\n\t}\n\n\tbody {\n\t\tmin-height: 100vh;\n\t\tbackground: #f57921;\n\t}\n`;\n\nexport const Wrapper = styled.div`\n\tmax-width: 1080px;\n\twidth: 90%;\n\tmargin: 0 auto;\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: space-between;\n\talign-items: center;\n`;","import React from 'react';\nimport styled from 'styled-components';\nimport logo from './../images/logo.png';\nimport { Wrapper } from '../GlobalStyles.js';\n\nconst StyledHeader = styled.header`\n\twidth: 70%;\n\tmargin: 0 auto;\n\n\th1 img {\n\t\theight: 150px;\n\t}\n\n\tp:nth-of-type(2) {\n\t\tmargin: 10px;\n\t\tfont-size: 2rem;\t\n\t}\n`;\n\nconst Header = () => {\n\treturn (\n\t\t<StyledHeader>\n\t\t\t<Wrapper>\n\t\t\t\t<h1>\n\t\t\t\t\t<img src={logo} alt=\"Boggle Logo\" />\n\t\t\t\t</h1>\n\t\t\t\t<p>The goal of Boggle is to find as many words as you can in the letters on the game board. Type them out and hit enter one at a time until you've found all you can. The more words the better!</p>\n\t\t\t\t<p>Good luck!</p>\n\t\t\t</Wrapper>\n\t\t</StyledHeader>\n\t)\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport styled from 'styled-components';\n\nconst GameBoard = styled.div`\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tjustify-content: center;\n\tbackground-color: #398bd4;\n\twidth: 100%;\n\theight: 600px;\n\tmargin: 0 50px 30px;\n\tborder: 5px solid #464655;\n\tborder-radius: 10px;\n\tbox-shadow: -4px 4px 1px black;\n`;\n\nconst Letter = styled.div`\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\tbackground: #accecc;\n\twidth: calc(25% - 20px);\n\theight: calc(25% - 20px);\n\tmargin: 10px;\n\tpadding: 10px;\n\tborder-radius: 10px;\n\tfont-size: 3.5rem;\n`;\n\nclass RandomTiles extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = ({\n\t\t\tletterArray: []\n\t\t})\n\t}\n\n\tdice = () => {\n\t\treturn [\n\t\t\t['R', 'I', 'F', 'O', 'B', 'X'],\n\t\t\t['I', 'F', 'E', 'H', 'E', 'Y'],\n\t\t\t['D', 'E', 'N', 'O', 'W', 'S'],\n\t\t\t['U', 'T', 'O', 'K', 'N', 'D'],\n\t\t\t['H', 'M', 'S', 'R', 'A', 'O'],\n\t\t\t['L', 'U', 'P', 'E', 'T', 'S'],\n\t\t\t['A', 'C', 'I', 'T', 'O', 'A'],\n\t\t\t['Y', 'L', 'G', 'K', 'U', 'E'],\n\t\t\t['Y', 'B', 'M', 'J', 'O', 'A'],\n\t\t\t['E', 'H', 'I', 'S', 'P', 'N'],\n\t\t\t['V', 'E', 'T', 'I', 'G', 'N'],\n\t\t\t['B', 'A', 'L', 'I', 'Y', 'T'],\n\t\t\t['E', 'Z', 'A', 'V', 'N', 'D'],\n\t\t\t['R', 'A', 'L', 'E', 'S', 'C'],\n\t\t\t['U', 'W', 'I', 'L', 'R', 'G'],\n\t\t\t['P', 'A', 'C', 'E', 'M', 'D']\n\t\t];\n\t}\n\n\trandomLetter = () => {\n\t\tconst diceRoll = this.dice().map(die => {\n\t\t\t\tconst randomNumber = Math.floor(Math.random() * die.length);\n\t\t\t\treturn die[randomNumber]\n\t\t});\n\t\tconst letterArray = diceRoll.map((letter, i) => diceRoll[i])\n\t\tthis.setState({ letterArray })\n\t\tthis.props.storeTile(letterArray);\n\t};\n\n\tcomponentDidMount() {\n\t\tthis.randomLetter();\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<GameBoard>\n\t\t\t\t{this.state.letterArray.map((letter, i) => <Letter key={i}>{this.state.letterArray[i]}</Letter>)}\n\t\t\t</GameBoard>\n\t\t);\n\t};\n};\n\nexport default RandomTiles;","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledForm = styled.form`\n\ttext-align: center;\n`;\n\nexport const ButtonContainer = styled.div`\n\tdisplay: flex;\n`;\n\nconst Label = styled.label`\n\tmargin: 20px;\n\tpadding: 7px;\n\tborder: none;\n`;\n\nconst Input = styled.input`\n\tmargin: 20px;\n\tpadding: 7px;\n\tborder: none;\n\twidth: 50%;\n\tbox-shadow: -2px 2px black;\t\n`;\n\nconst Form = props => {\n\treturn (\n\t\t<StyledForm>\n\t\t\t<div>\n\t\t\t\t<Label htmlFor=\"wordGuess\">Submit a Word:</Label>\n\t\t\t\t<Input type=\"text\" id=\"wordGuess\" value={props.value} onChange={e => props.onChange(e)} />\n\t\t\t</div>\n\t\t\t<ButtonContainer>\n\t\t\t\t<Input type=\"submit\" value=\"Submit A Word\" onClick={e => props.handleSubmit(e)} />\t\t\t\n\t\t\t\t<Input type=\"button\" value=\"Finish Turn\" onClick={e => props.handleFinish(e)}/>\n\t\t\t</ButtonContainer>\n\t\t</StyledForm>\n\t)\n}\n\nexport default Form;","import React from 'react';\nimport styled from 'styled-components';\n\nconst Guesses = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-around;\n  width: 100%;\n  padding-left: 0px;\n  \n  li {\n    background: white;\n    min-width: calc(40% - 40px);\n    margin: 20px;\n    padding: 7px 10px;\n    border: 1px solid black;\n    box-shadow: -1px 1px black;\n    text-align: center;\n    list-style: none;\n  }\n\n  .correct-guess {\n    background: #76d35d;\n  }\n  \n  .incorrect-guess {\n    background: #aa2f23;\n  }\n`;\n\nconst GuessList = props => {\n  return (\n    <>\n      <Guesses>\n        {\n          (!props.correctGuesses.length && !props.submitted) || (props.submitted && !props.userGuesses.length) ?\n          props.userGuesses.map((guess, i) => <li key={i}>{props.userGuesses[i]}</li>) : \n          props.correctGuesses.map((guess, i) => <li key={i} className={`correct-guess`}>{props.correctGuesses[i]}</li>)\n        }\n      </Guesses>\n      <Guesses>\n        {\n          (props.incorrectGuesses.length && props.submitted) ?\n          props.incorrectGuesses.map((guess, i) => <li key={i} className={`incorrect-guess`}>{props.incorrectGuesses[i]}</li>) :\n          null\n        }\n      </Guesses>\n    </>\n  )\n}\n\nexport default GuessList;","import React from 'react';\n\nconst WinnerMessage = (props) => {\n  return (\n    <div>\n      {\n        props.correctGuesses.length ?\n        <p>Great job! You got {props.correctGuesses.length} right and {props.incorrectGuesses.length} wrong!</p> :\n        null\n      }\n      {\n        props.submitted && !props.correctGuesses.length ?\n        <p>Sorry, you didn't get any right guesses!</p> :\n        null\n      }\n    </div>\n  )\n};\n\nexport default WinnerMessage;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport { PROXY_URL, DICTIONARY_URL } from './constants/dictionary_api';\nimport { setTimeout } from 'timers';\n\nimport styled from 'styled-components';\nimport { GlobalStyle, Wrapper } from './GlobalStyles';\n\nimport Header from './components/Header';\nimport RandomTiles from './components/RandomTiles';\nimport Form from './components/Form';\nimport GuessList from './components/GuessList';\nimport WinnerMessage from './components/WinnerMessage';\n\nexport const Board = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-between;\n\tmargin-top: 50px;\n`;\n\nexport const FormContainer = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n`;\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = ({\n\t\t\tuserInput: '',\n\t\t\tuserGuesses: [],\n\t\t\tsearchResults: [],\n\t\t\tcorrectGuesses: [],\n\t\t\tincorrectGuesses: [],\n\t\t\tsubmitted: false,\n\t\t\twordResult: ''\n\t\t});\n\t};\n\n\tstoreTiles = letterArray => this.setState({ letterArray });\n\n\thandleChange = e => this.setState({ userInput: e.target.value });\n\n\thandleSubmit = e => {\n\t\te.preventDefault();\n\t\tif (!this.state.submitted && this.state.userInput) {\n\t\t\tconst userInput = \"\";\n\t\t\tthis.setState({ userInput });\n\t\t\t\n\t\t\tconst lowerCaseInput = this.state.userInput.toLowerCase().toString();\n\t\t\tconst userGuesses = this.state.userGuesses;\n\t\t\tuserGuesses.push(lowerCaseInput);\n\t\t\tthis.setState({ userGuesses });\t\n\t\t}\n\t};\n\t\n\thandleFinish = e => {\n\t\te.preventDefault();\n\t\tif (!this.state.submitted) {\n\t\t\tthis.state.userGuesses.forEach(guess => {\n\t\t\t\tthis.getInfo(guess)\n\t\t\t});\n\t\t\tif (this.state.userGuesses) {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.setState({ submitted: true })\n\t\t\t\t}, 5000);\n\t\t\t};\t\n\t\t}\n\t};\n\n\tasync getInfo(word) {\n\t\tconst apiKey = process.env.REACT_APP_API_KEY;\n\t\tconst apiId = process.env.REACT_APP_API_ID;\n\t\t\n\t\tawait axios.get(`${PROXY_URL}${DICTIONARY_URL(word)}`, {\n\t\t\tdataResponse: 'json',\n\t\t\theaders: {\n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'app_id': apiId,\n\t\t\t\t'app_key': apiKey\n\t\t\t}\n\t\t}).then(res => {\n\t\t\tconst result = res.data.id;\n\t\t\tconst checkedTiles = this.checkTiles(result);\n\t\t\tthis.handleGuesses(checkedTiles, result);\n\t\t}, err => {\n\t\t\tthis.handleGuesses(err, word)\n\t\t});\n\t};\n\n\tcheckTiles = (word) => {\n\t\tconst letters = word.toUpperCase().split(\"\");\n\t\treturn letters.map(letter => this.state.letterArray.includes(letter));\n\t};\n\n\thandleGuesses = (checkedTiles, word) => {\n\t\tif (Array.isArray(checkedTiles) && typeof word === 'string') {\n\t\t\tif (!checkedTiles.includes(false)) {\n\t\t\t\tconst guess = this.state.correctGuesses;\n\t\t\t\tguess.push(word);\n\t\t\t\tthis.setState({ correctGuesses: guess });\n\t\t\t}\n\t\t} else {\n\t\t\tconst guess = this.state.incorrectGuesses;\n\t\t\tguess.push(word);\n\t\t\tthis.setState({ incorrectGuesses: guess });\n\t\t}\n\t};\n\n\trender() {\n\t\treturn(\n\t\t\t<>\n\t\t\t\t<GlobalStyle />\n\t\t\t\t<Header />\n\t\t\t\t<main>\n\t\t\t\t\t<Wrapper>\n\t\t\t\t\t\t<Board>\n\t\t\t\t\t\t\t<RandomTiles storeTile={this.storeTiles} />\n\t\t\t\t\t\t\t<FormContainer>\n\t\t\t\t\t\t\t\t<Form\n\t\t\t\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\t\t\t\thandleSubmit={this.handleSubmit}\n\t\t\t\t\t\t\t\t\thandleFinish={this.handleFinish}\n\t\t\t\t\t\t\t\t\tvalue={this.state.userInput}\n\t\t\t\t\t\t\t\t\tsearchResults={this.state.searchResults}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<GuessList\n\t\t\t\t\t\t\t\t\tuserGuesses={this.state.userGuesses}\n\t\t\t\t\t\t\t\t\tcorrectGuesses={this.state.correctGuesses}\n\t\t\t\t\t\t\t\t\tincorrectGuesses={this.state.incorrectGuesses} \n\t\t\t\t\t\t\t\t\tsubmitted={this.state.submitted}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<WinnerMessage\n\t\t\t\t\t\t\t\t\tcorrectGuesses={this.state.correctGuesses}\n\t\t\t\t\t\t\t\t\tincorrectGuesses={this.state.incorrectGuesses}\n\t\t\t\t\t\t\t\t\tsubmitted={this.state.submitted}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</FormContainer>\n\t\t\t\t\t\t</Board>\n\t\t\t\t\t</Wrapper>\n\t\t\t\t</main>\n\t\t\t</>\n\t\t);\n\t};\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}